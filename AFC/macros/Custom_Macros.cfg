[gcode_macro goose_park]	
variable_belt_pwm: 0 # speed at which should be belt driven (PWM du) Should be value between 0.0 and 1.0

gcode:
    START_BELT
    AFC_PARK

[gcode_macro goose_cut]	
variable_belt_pwm: 0 # speed at which should be belt driven (PWM du) Should be value between 0.0 and 1.0

gcode:
    START_BELT
    AFC_CUT

[gcode_macro BELT_POOP]
gcode:
    # START_BELT
    # AFC_PARK
    GOOSE_PURGE {rawparams}
    # AFC_BRUSH
    # STOP_BELT    


[gcode_macro START_BELT]
variable_belt_pwm: 0 # speed at which should be belt driven (PWM du) Should be value between 0.0 and 1.0

gcode:
    UPDATE_DELAYED_GCODE ID=_goose_belt_timer DURATION=0
    SET_PIN PIN=goose_belt VALUE={belt_pwm}
    

[gcode_macro STOP_BELT]
variable_time_belt_stop: 20 # how long after purging routine ends should be belt stopped. Useful to cleanup all the remains on belt (in seconds)

gcode:
    {% if time_belt_stop <= 0 %}
		SET_PIN PIN=goose_belt VALUE=0
	{% else %}
		UPDATE_DELAYED_GCODE ID=_goose_belt_timer DURATION={time_belt_stop}
	{% endif %}


[gcode_macro BELT_PURGE]

description: Goose Belt Purger routine. Call with parameter VOLUME to set required purge volume (in mm^3)

# ===Parameters===
# Positions:
	# where should toolhead go before reaching purge position? Should be safe spot which can be reached without collisions and from which purge position can be reached
variable_x_stage: 15
variable_y_stage: 309
	# where should toolhead go for actual purging
variable_x_purge: 15
variable_Y_purge: 309

# Feedrates:
	# what speed should be used to go to staging position before purge (mm/s)
variable_th_to_stage: 300
	# what speed should be used to go to purge position. Also used for return to stage after purge (mm/s)
variable_th_to_purge: 200
	# speed at which should be belt driven (PWM du) Should be value between 0.0 and 1.0
variable_belt_pwm: 0.375
	# feedrate for extrusion during purge (mm/s)
variable_extrusion_fr: 7.5
  # feedrate for retraction (mm/s)
variable_retraction_fr: 30
  # feedrate for de-retraction (mm/s)
variable_deretraction_fr: 30
	

# Extrusion parameters:
  # Purging volume is split into several shorter segments to ensure waste "toothpicks" have manageable size. Each segment is folowed by retraction and deretraction.
	# how long is each segment (mm)
variable_extrusion_segment: 50
	# retraction length
variable_retraction: 2
    # retraction length
variable_deretraction: 2
    # dwell time between retraction and deretraction (in milliseconds)
variable_rtr_dwell: 2000
    # Round up last segment? Last segment in purge routine is usually shorter than other segments. It might be good idea to round up last segment length to match others to prevent issues with waste removal. increases waste volume
variable_roundup: True


# General behaviour:
	# True if purging shall start by movement to staging point. False if printhead shall go directly to purging position
	# Can be disabled if you are certain you will only ever call purging from already safe spot. This is often case with MMUs, for which you park first anyway to swap a filament
variable_start_with_stage: False
	# True if purging shall end by movement back to staging point. False if you want to skip staging and go directly to printing moves
	# Can usualy be disabled, which will save time and reduce oozing
variable_end_with_stage: False
	# Filament diameter. Used to convert purge volume to purge length 
variable_filament_diameter: 1.75
	# how long after purging routine ends should be belt stopped. Useful to cleanup all the remains on belt (in seconds)
variable_time_belt_stop: 25


# Fan control:
    # Activating or disabling fan may have beneficial effect on adhesion to belt or to detachement from belt. Purge macro can store your fan setting, override it for duration of purge and automaticaly restore it after
    # This variable controls if fan is controled by macro. False if fan should not be overriden
variable_control_fan: True
    # This sets fan speed during purge routine. Value between 0.0 and 1.0. Beware, if you print materials sensitive to draft, setting your fan too high can have negative influence on printed object
variable_fan_speed: 0.0

### DO NOT EDIT BEYOND THIS POINT ###

# ===Code=== 
gcode:
  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=POOPER_state
  
  # ======================================================================================
  # ==================== DEFINE BASIC VARIABLES ==========================================
  # ======================================================================================
  
  # {% set park_vars = printer['gcode_macro POOPER_PARK'] %}
  # {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
  # {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
  # {% set tp_count = printer['gcode_macro _POOPER_COUNT'] %}
  # {% set pos = printer.gcode_move.gcode_position %}
  # {% set restore_z = [printer['gcode_macro POOPER_PARK'].restore_z,pos.z]|max %}
  # {% set pos_max = printer.toolhead.axis_maximum %}
  # {% set position_y = pos_max.y - skew_correction %}
  # {% set tp = printer['gcode_macro POOPER'] %}
  # {% set travel_to_purge_xy = travel_spd_xy * 0.2 %}

  # ======================================================================================
  # ==================== DETERMINE PURGE LENGTH ==========================================
  # ======================================================================================

  {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
    {action_respond_info("POOPER: param PURGE_LENGTH provided")}
    {% set purge_len = params.PURGE_LENGTH|float %}
  {% else %} # ========================= USE CONFIG DEFAULT LENGTH =============================
    {action_respond_info("POOPER: No PURGE_LENGTH. Using default")}
    {% set purge_len = purge_length|float + tp.retracted_length %}
  {% endif %}

  # # ==================================== APPLY PURGE MINIMUM =============================
  {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
  {action_respond_info("POOPER: Purging %dmm of filament" % (purge_len))}

  {% if params.PURGE_LENGTH %}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% else %} 
      {% set purge_len = purge_length %}
    {% endif %}
  
    # Apply purge minimum
  #{% set purge_len = [purge_len, purge_length_minimum]|max %}
  {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
  {action_respond_info("POOPER: Purging %dmm of filament" % (purge_len))}
    
  # ======================================================================================
  # ==================== PURGING SEQUENCE ================================================
  # ======================================================================================

  # Set to absolute positioning.
  G90

  # ====================================================================================
  # ==================== POSITIONING ===================================================
  # ====================================================================================
  
  # Move to the assembly, first a bit more to the right (brush_start) to avoid a 
  # potential filametrix pin if it's not already on the same Y coordinate.
  
  {% if printer.toolhead.position.y != position_y %}
    G1 X{brush_start} Y{position_y} F{travel_spd_xy}
  {% endif %}
  # Move over to the tray
  G1 X{purge_x} F{travel_to_purge_xy}

  # ====================================================================================
  # ==================== START ITERATING ===============================================
  # ====================================================================================
  
  # Calculate total number of iterations based on the purge length and the max_iteration 
  # length.
  {% set poops = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
  {% set purge_per_poop = purge_len|float / poops %}
  {% set retracts_per_poop = (purge_per_poop / 40)|round(0, 'ceil')|int %}
  {% set purge_per_retract = (purge_per_poop / retracts_per_poop)|int %}
  {% set pulses_per_retract = (purge_per_poop / retracts_per_poop / 5)|round(0, 'ceil')|int %}
  {% set pulses_per_poop = (purge_per_poop / 20)|round(0, 'ceil')|int %}
  {% set purge_per_pulse = purge_per_poop / pulses_per_poop %}
  {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
  {% set travel_to_purge_xy = travel_spd_xy * 0.2 %}
  {% set deposit_speed = wipe_spd_xy * 0.3 %}
  
  # Repeat the process until purge_len is reached
  {% for poop in range(poops) %}
    RESPOND MSG={"'POOPER: Poop %d of %d (%.1fmm)'" % (poop + 1, poops, purge_per_poop)}

    G1 X{purge_x} F{travel_to_purge_xy}
    # relative positioning
    G91 
    # relative extrusion
    M83

    # Purge filament in a pulsating motion to purge the filament quicker and better
    {% for pulse in range(pulses_per_poop) %}
      # Calculations to determine z-speed
      {% set purged_this_poop = pulse * purge_per_pulse %}
      M106 S255 #full fan
      # Purge quickly
      G1  E{purge_per_pulse * 0.95} F{purge_spd}
      # Purge a tiny bit slowly
      G1  E{purge_per_pulse * 0.5} F{purge_spd}

      # retract and unretract filament every now and then for thourough cleaning
      {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
        G1 E-2 F2500
        G1 E2 F1500
      {% endif %}
      
    {% endfor %}
    M106 S255 #full fan
    # Retract to match what AFC is expecting
    G1 E-{tp.retracted_length} F{tp.retract_speed * 60}
    
    # ==================================================================================
    # ==================== DEPOSIT poop ================================================
    # ==================================================================================
    G90
    M106 S255
    G4 P{pressure_release_time}

    G1 X{tp.brush_start} F{deposit_speed}
    G1 X{purge_x} F{travel_to_purge_xy}
    G1 X{tp.brush_start + tp.brush_width} F{wipe_spd_xy}
    #G1 X{tp.brush_start + tp.brush_width} F{wipe_spd_xy}
  {% endfor %}
  

  # ======================================================================================
  # ==================== RESTORE STATE ===================================================
  # ======================================================================================

  G90 # absolute positioning
  G1 Z{restore_z} F{travel_spd_z}
  
  {% if part_cooling_fan >= 0 %}
    # Reset part cooling fan if it was changed
    M106 S{(backup_fan_speed * 255)|int}
  {% endif %}
  
  M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=POOPER_state 
