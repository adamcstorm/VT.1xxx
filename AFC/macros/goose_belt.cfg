[output_pin goose_belt]
pin: PB7
pwm: True
hardware_pwm: True
cycle_time: 0.00004   # 25kHz PWM

[gcode_macro goose_purge]

description: Goose Belt Purger routine. Call with parameter VOLUME to set required purge volume (in mm^3)

# ===Parameters===
# Positions:
	# where should toolhead go before reaching purge position? Should be safe spot which can be reached without collisions and from which purge position can be reached
variable_x_stage: 15
variable_y_stage: 309
	# where should toolhead go for actual purging
variable_x_purge: 15
variable_Y_purge: 309

# Feedrates:
	# what speed should be used to go to staging position before purge (mm/s)
variable_th_to_stage: 300
	# what speed should be used to go to purge position. Also used for return to stage after purge (mm/s)
variable_th_to_purge: 200
	# speed at which should be belt driven (PWM du) Should be value between 0.0 and 1.0
variable_belt_pwm: 0.25
	# feedrate for extrusion during purge (mm/s)
variable_extrusion_fr: 5
  # feedrate for retraction (mm/s)
variable_retraction_fr: 30
  # feedrate for de-retraction (mm/s)
variable_deretraction_fr: 30
	

# Extrusion parameters:
  # Purging volume is split into several shorter segments to ensure waste "toothpicks" have manageable size. Each segment is folowed by retraction and deretraction.
	# how long is each segment (mm)
variable_extrusion_segment: 100
	# retraction length
variable_retraction: 2
    # retraction length
variable_deretraction: 2
    # dwell time between retraction and deretraction (in milliseconds)
variable_rtr_dwell: 3000
    # Round up last segment? Last segment in purge routine is usually shorter than other segments. It might be good idea to round up last segment length to match others to prevent issues with waste removal. increases waste volume
variable_roundup: False


# General behaviour:
	# True if purging shall start by movement to staging point. False if printhead shall go directly to purging position
	# Can be disabled if you are certain you will only ever call purging from already safe spot. This is often case with MMUs, for which you park first anyway to swap a filament
variable_start_with_stage: False
	# True if purging shall end by movement back to staging point. False if you want to skip staging and go directly to printing moves
	# Can usualy be disabled, which will save time and reduce oozing
variable_end_with_stage: False
	# Filament diameter. Used to convert purge volume to purge length 
variable_filament_diameter: 1.75
	# how long after purging routine ends should be belt stopped. Useful to cleanup all the remains on belt (in seconds)
variable_time_belt_stop: 30


# ===Code=== 
gcode:

            #purging routine for single segment. Recurses itself for remaining segments
    {% macro purge_segment(length_remaining) %}
      	{% if length_remaining > 0 %}
            {% if length_remaining < extrusion_segment %}
                {% if roundup %}
                    G1 E{extrusion_segment} F{extrusion_fr*60}
                {% else %}
                    G1 E{length_remaining} F{extrusion_fr*60}
                {% endif %}
                G1 E{(-retraction)} F{retraction_fr*60}
            {% else %}
                G1 E{extrusion_segment} F{extrusion_fr*60}
                G1 E{(-retraction)} F{retraction_fr*60}
                G4 P{rtr_dwell}
                G1 E{deretraction} F{deretraction_fr*60}
                #recursion
                {purge_segment(length_remaining - extrusion_segment)}
            {% endif %}
        {% endif %}
    {% endmacro %}
    
 #    {% set purge_volume = params.PURGE_LENGTH|default(80)|float %}
	# {% if purge_volume < 0 %}
	# 	{% set purge_volume = 0 %}
	# {% endif %}
	# {% set purge_length = purge_volume/(3.1415926*filament_diameter*filament_diameter/4) %}
    
    {% set purge_length = params.PURGE_LENGTH|default(80)|float %}

    UPDATE_DELAYED_GCODE ID=_goose_belt_stop DURATION=0
		
	#
	SAVE_GCODE_STATE NAME=goose_purge_state
	G90
	M83
		#go to staging
	{% if start_with_stage == True %}
		G1 X{x_stage} Y{y_stage} F{th_to_stage*60}
	{% endif %}
		#start belt
        
	SET_PIN PIN=goose_belt VALUE={belt_pwm}
		
		#go to purge position
	G1 X{x_purge} Y{y_purge} F{th_to_purge*60}

        #purging cycle   
    {purge_segment(purge_length)}
		
		#call delayed macro to stop the belt or stop it right away if requested time is 0
	{% if time_belt_stop <= 0 %}
		SET_PIN PIN=goose_belt VALUE=0
	{% else %}
		UPDATE_DELAYED_GCODE ID=_goose_belt_stop DURATION={time_belt_stop}
	{% endif %}
	
		#go back to staging
	{% if end_with_stage == True %}
		G1 X{x_stage} Y{y_stage} F{th_to_purge*60}
	{% endif %}

    RESTORE_GCODE_STATE NAME=goose_purge_state

	
[delayed_gcode _goose_belt_stop]
gcode:
	SET_PIN PIN=goose_belt VALUE=0